var search_data = {"index":{"searchIndex":["admincontroller","apihelper","applicationcontroller","applicationhelper","content","datamapper","adapters","postgresadapter","property","aes256key","sha256hash","sha256salt","downloadcontroller","favoritefileassociation","filefolderassociation","fileuserassociation","filescontroller","folderfolderassociation","friendscontroller","friendship","object","requesterror","searchcontroller","sharedbymeassociation","sharedtomeassociation","storage","fakeobject","simulatedfile","string","success","synccontroller","user","wfile","wfolder","wodacrypt","wodahash","wodaresource","classmethods","xfile","xpart","[]()","[]()","add_file_size()","breadcrumb()","can_add_file_size()","change()","check_any_params()","check_create_params()","check_params()","check_update_params()","clear()","complete_upload()","content()","content=()","cors()","crawl_folder()","create()","create()","create()","create()","create()","create_folder()","create_from_origin()","create_root()","ddl()","delete()","delete()","delete()","delete()","delete()","delete()","delete_file()","delete_user()","description()","description()","description()","description()","downloaded()","favorites()","files()","from_hex()","full_retrieve()","generate_link()","generate_random()","get()","get_for_path()","get_user()","has_param?()","has_password?()","hex_regex()","included()","last_update()","link()","link()","link_from_origin()","list()","list()","list_friendships()","model()","model()","model()","model()","model()","model()","move()","move()","move()","needed_parts()","needed_parts()","new()","new()","new()","new()","new()","new()","new()","new()","path=()","private_description()","public()","put()","read()","recents()","remove_file_size()","render()","require_admin_user()","require_login()","rescue_db_error()","rescue_request_error()","retrieve()","search()","set_favorite()","set_password()","set_properties()","set_public()","share()","share_to_user()","shared_by_me()","shared_to_me()","synchronize()","to_hex()","transaction()","uncrypt()","unshare()","unshare_to_user()","updatable?()","updatable_properties()","updatable_property()","update_and_delete()","update_and_delete()","update_and_save()","update_and_save()","update_user_space()","upload_part()","uploaded()","use_aws()","use_aws=()","users()","wrong_route()"],"longSearchIndex":["admincontroller","apihelper","applicationcontroller","applicationhelper","content","datamapper","datamapper::adapters","datamapper::adapters::postgresadapter","datamapper::property","datamapper::property::aes256key","datamapper::property::sha256hash","datamapper::property::sha256salt","downloadcontroller","favoritefileassociation","filefolderassociation","fileuserassociation","filescontroller","folderfolderassociation","friendscontroller","friendship","object","requesterror","searchcontroller","sharedbymeassociation","sharedtomeassociation","storage","storage::fakeobject","storage::fakeobject::simulatedfile","string","success","synccontroller","user","wfile","wfolder","wodacrypt","wodahash","wodaresource","wodaresource::classmethods","xfile","xpart","storage::[]()","storage::fakeobject#[]()","user#add_file_size()","filescontroller#breadcrumb()","user#can_add_file_size()","synccontroller#change()","applicationcontroller#check_any_params()","applicationcontroller#check_create_params()","applicationcontroller#check_params()","applicationcontroller#check_update_params()","storage::clear()","synccontroller#complete_upload()","xfile#content()","xfile#content=()","applicationcontroller#cors()","filescontroller#crawl_folder()","content::create()","friendscontroller#create()","storage::fakeobject#create()","wfile::create()","wfolder::create()","synccontroller#create_folder()","wfile::create_from_origin()","wfolder::create_root()","downloadcontroller#ddl()","content#delete()","friendscontroller#delete()","synccontroller#delete()","user#delete()","wfile#delete()","wfolder#delete()","admincontroller#delete_file()","admincontroller#delete_user()","content#description()","user#description()","xfile#description()","xpart#description()","filescontroller#downloaded()","filescontroller#favorites()","admincontroller#files()","string#from_hex()","downloadcontroller#full_retrieve()","xfile#generate_link()","datamapper::property::sha256hash::generate_random()","downloadcontroller#get()","wfolder::get_for_path()","applicationcontroller#get_user()","applicationcontroller#has_param?()","user#has_password?()","object#hex_regex()","wodaresource::included()","filescontroller#last_update()","filescontroller#link()","xfile#link()","wfile::link_from_origin()","filescontroller#list()","friendscontroller#list()","friendscontroller#list_friendships()","admincontroller#model()","downloadcontroller#model()","filescontroller#model()","friendscontroller#model()","searchcontroller#model()","synccontroller#model()","filescontroller#move()","wfile::move()","wfolder::move()","content#needed_parts()","synccontroller#needed_parts()","requesterror::new()","storage::fakeobject::new()","storage::fakeobject::simulatedfile::new()","success::new()","wfile::new()","wfolder::new()","wodacrypt::new()","xfile::new()","storage::path=()","user#private_description()","filescontroller#public()","synccontroller#put()","storage::fakeobject::simulatedfile#read()","filescontroller#recents()","user#remove_file_size()","applicationcontroller#render()","applicationcontroller#require_admin_user()","applicationcontroller#require_login()","applicationcontroller#rescue_db_error()","applicationcontroller#rescue_request_error()","downloadcontroller#retrieve()","searchcontroller#search()","filescontroller#set_favorite()","user#set_password()","applicationcontroller#set_properties()","filescontroller#set_public()","filescontroller#share()","wfile::share_to_user()","filescontroller#shared_by_me()","filescontroller#shared_to_me()","synccontroller#synchronize()","string#to_hex()","applicationcontroller#transaction()","downloadcontroller#uncrypt()","filescontroller#unshare()","wfile::unshare_to_user()","wodaresource::classmethods#updatable?()","wodaresource::classmethods#updatable_properties()","wodaresource::classmethods#updatable_property()","wfile#update_and_delete()","wfolder#update_and_delete()","wfile#update_and_save()","wfolder#update_and_save()","admincontroller#update_user_space()","synccontroller#upload_part()","content#uploaded()","storage::use_aws()","storage::use_aws=()","admincontroller#users()","admincontroller#wrong_route()"],"info":[["AdminController","","AdminController.html","",""],["ApiHelper","","ApiHelper.html","",""],["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["Content","","Content.html","",""],["DataMapper","","DataMapper.html","",""],["DataMapper::Adapters","","DataMapper/Adapters.html","",""],["DataMapper::Adapters::PostgresAdapter","","DataMapper/Adapters/PostgresAdapter.html","",""],["DataMapper::Property","","DataMapper/Property.html","",""],["DataMapper::Property::AES256Key","","DataMapper/Property/AES256Key.html","","<p>A class meant to handle an AES-256 key property in models\n"],["DataMapper::Property::SHA256Hash","","DataMapper/Property/SHA256Hash.html","","<p>A class meant to handle an SHA-256 property in models\n"],["DataMapper::Property::SHA256Salt","","DataMapper/Property/SHA256Salt.html","",""],["DownloadController","","DownloadController.html","",""],["FavoriteFileAssociation","","FavoriteFileAssociation.html","",""],["FileFolderAssociation","","FileFolderAssociation.html","",""],["FileUserAssociation","","FileUserAssociation.html","",""],["FilesController","","FilesController.html","",""],["FolderFolderAssociation","","FolderFolderAssociation.html","",""],["FriendsController","","FriendsController.html","",""],["Friendship","","Friendship.html","",""],["Object","","Object.html","",""],["RequestError","","RequestError.html","","<p>The exception class for when the request is invalid. sym is an error symbol\nand str is an error message ...\n"],["SearchController","","SearchController.html","",""],["SharedByMeAssociation","","SharedByMeAssociation.html","",""],["SharedToMeAssociation","","SharedToMeAssociation.html","",""],["Storage","","Storage.html","",""],["Storage::FakeObject","","Storage/FakeObject.html","",""],["Storage::FakeObject::SimulatedFile","","Storage/FakeObject/SimulatedFile.html","",""],["String","","String.html","",""],["Success","","Success.html","",""],["SyncController","","SyncController.html","",""],["User","","User.html","","<p>The User model. represents a user with login, first name, last name, email\nand password. Also links to ...\n"],["WFile","","WFile.html","",""],["WFolder","","WFolder.html","",""],["WodaCrypt","","WodaCrypt.html","",""],["WodaHash","","WodaHash.html","",""],["WodaResource","","WodaResource.html","","<p>A woda resource. Defines convinience methods\n"],["WodaResource::ClassMethods","","WodaResource/ClassMethods.html","",""],["XFile","","XFile.html","","<p>A model representing a file belonging to a user.\n"],["XPart","","XPart.html","","<p>A model representing a part belonging to a file.\n"],["[]","Storage","Storage.html#method-c-5B-5D","(bucket)",""],["[]","Storage::FakeObject","Storage/FakeObject.html#method-i-5B-5D","(file)",""],["add_file_size","User","User.html#method-i-add_file_size","(size)",""],["breadcrumb","FilesController","FilesController.html#method-i-breadcrumb","()","<p>Get the path/breadcrum of a file or a folder\n"],["can_add_file_size","User","User.html#method-i-can_add_file_size","(size)",""],["change","SyncController","SyncController.html#method-i-change","()","<p>Delete and recreate a file with the given parameters\n"],["check_any_params","ApplicationController","ApplicationController.html#method-i-check_any_params","(*param)","<p>Checks whether any param of a set of params is in the request\n"],["check_create_params","ApplicationController","ApplicationController.html#method-i-check_create_params","()","<p>A before action for create CRUD functions: checks that all the necessary\nmembers of the model are indeed ...\n"],["check_params","ApplicationController","ApplicationController.html#method-i-check_params","(*param)","<p>Checks whether a set of params is in the request\n"],["check_update_params","ApplicationController","ApplicationController.html#method-i-check_update_params","(*args)","<p>A before action for update CRUD functions: checks that any updatable member\nof the model is indeed in ...\n"],["clear","Storage","Storage.html#method-c-clear","(bucket)",""],["complete_upload","SyncController","SyncController.html#method-i-complete_upload","(content, part)","<p>Method to use to complete an upload if all the content parts have been\nuploaded\n"],["content","XFile","XFile.html#method-i-content","()",""],["content=","XFile","XFile.html#method-i-content-3D","(arg)",""],["cors","ApplicationController","ApplicationController.html#method-i-cors","()",""],["crawl_folder","FilesController","FilesController.html#method-i-crawl_folder","(folder, only_public = false, depth = -1)","<p>Crawl a folder\n"],["create","Content","Content.html#method-c-create","(content_hash, size)","<p>Note 2: right now the policy is to forbid people who announce the same hash\nbut not the same salted hash ...\n"],["create","FriendsController","FriendsController.html#method-i-create","()","<p>Create a friend for the current user\n"],["create","Storage::FakeObject","Storage/FakeObject.html#method-i-create","(path, info = {})",""],["create","WFile","WFile.html#method-c-create","(user, path)","<p>Create a file and its parent folders.\n"],["create","WFolder","WFolder.html#method-c-create","(user, path)","<p>Create a folder if it does not exist.\n"],["create_folder","SyncController","SyncController.html#method-i-create_folder","()","<p>Creates and return a new folder\n"],["create_from_origin","WFile","WFile.html#method-c-create_from_origin","(user, origin)","<p>Create a file from another public file.\n"],["create_root","WFolder","WFolder.html#method-c-create_root","(user)","<p>Create the root folder for the current user\n"],["ddl","DownloadController","DownloadController.html#method-i-ddl","()","<p>Download a file from a direct link\n"],["delete","Content","Content.html#method-i-delete","()",""],["delete","FriendsController","FriendsController.html#method-i-delete","()","<p>Delete a friend for the current user\n"],["delete","SyncController","SyncController.html#method-i-delete","()","<p>Delete a file\n"],["delete","User","User.html#method-i-delete","()","<p>Destroy a user and all its attributes, files, folders, relationships, etc.\n"],["delete","WFile","WFile.html#method-i-delete","(current_user)","<p>Delete the current file and all its associations\n"],["delete","WFolder","WFolder.html#method-i-delete","(current_user)","<p>Delete the current folder and all its associations\n"],["delete_file","AdminController","AdminController.html#method-i-delete_file","()","<p>Returns the list of all files\n"],["delete_user","AdminController","AdminController.html#method-i-delete_user","()","<p>Delete a user\n"],["description","Content","Content.html#method-i-description","()",""],["description","User","User.html#method-i-description","()","<p>User's description\n"],["description","XFile","XFile.html#method-i-description","(user=nil)",""],["description","XPart","XPart.html#method-i-description","()",""],["downloaded","FilesController","FilesController.html#method-i-downloaded","()","<p>Returns all files downloaded at least one time\n"],["favorites","FilesController","FilesController.html#method-i-favorites","()","<p>Returns all the favorites files\n"],["files","AdminController","AdminController.html#method-i-files","()","<p>Returns the list of all-or-one file(s)\n"],["from_hex","String","String.html#method-i-from_hex","()",""],["full_retrieve","DownloadController","DownloadController.html#method-i-full_retrieve","(file)","<p>Retrieve an entire file from bucket\n"],["generate_link","XFile","XFile.html#method-i-generate_link","()",""],["generate_random","DataMapper::Property::SHA256Hash","DataMapper/Property/SHA256Hash.html#method-c-generate_random","()","<p>Generate a proper random string for that purpose\n"],["get","DownloadController","DownloadController.html#method-i-get","()","<p>Get the specific file corresponding to the ID given in parameters\n"],["get_for_path","WFolder","WFolder.html#method-c-get_for_path","(user, path)","<p>Get a folder.\n"],["get_user","ApplicationController","ApplicationController.html#method-i-get_user","()",""],["has_param?","ApplicationController","ApplicationController.html#method-i-has_param-3F","(p)","<p>Checks is p (which can be a string or a symbol) is in the request.\n"],["has_password?","User","User.html#method-i-has_password-3F","(pass)","<p>Always use this function to test for password\n"],["hex_regex","Object","Object.html#method-i-hex_regex","(size)",""],["included","WodaResource","WodaResource.html#method-c-included","(klass)",""],["last_update","FilesController","FilesController.html#method-i-last_update","()","<p>Method to get the timestamp of the last modification of the user's file\nlist\n"],["link","FilesController","FilesController.html#method-i-link","()","<p>Returns the Direct Download Link of a given file\n"],["link","XFile","XFile.html#method-i-link","()",""],["link_from_origin","WFile","WFile.html#method-c-link_from_origin","(user, origin)","<p>Link a file from another public file.\n"],["list","FilesController","FilesController.html#method-i-list","()","<p>Returns the full list of files and folders\n"],["list","FriendsController","FriendsController.html#method-i-list","()","<p>List all the friends\n"],["list_friendships","FriendsController","FriendsController.html#method-i-list_friendships","()","<p>List all the friendships\n"],["model","AdminController","AdminController.html#method-i-model","()","<p>Returns the model, useful for ApplicationController.\n"],["model","DownloadController","DownloadController.html#method-i-model","()","<p>Returns the model, useful for ApplicationController.\n"],["model","FilesController","FilesController.html#method-i-model","()","<p>Returns the model, useful for ApplicationController.\n"],["model","FriendsController","FriendsController.html#method-i-model","()","<p>Returns the model, useful for ApplicationController.\n"],["model","SearchController","SearchController.html#method-i-model","()","<p>Returns the model, useful for ApplicationController.\n"],["model","SyncController","SyncController.html#method-i-model","()","<p>Returns the model, useful for ApplicationController.\n"],["move","FilesController","FilesController.html#method-i-move","()","<p>Move a file or a folder from a source folder to a new destination folder\n"],["move","WFile","WFile.html#method-c-move","(file, source, destination)","<p>Move a file into a destination folder\n"],["move","WFolder","WFolder.html#method-c-move","(folder, source, destination)","<p>Move the folder into a destination folder\n"],["needed_parts","Content","Content.html#method-i-needed_parts","()",""],["needed_parts","SyncController","SyncController.html#method-i-needed_parts","()","<p>Method to get the content parts that still need to be uploaded\n"],["new","RequestError","RequestError.html#method-c-new","(sym, str)",""],["new","Storage::FakeObject","Storage/FakeObject.html#method-c-new","(path, bucket)",""],["new","Storage::FakeObject::SimulatedFile","Storage/FakeObject/SimulatedFile.html#method-c-new","(path)",""],["new","Success","Success.html#method-c-new","(b)",""],["new","WFile","WFile.html#method-c-new","(*args, &block)",""],["new","WFolder","WFolder.html#method-c-new","(*args, &block)",""],["new","WodaCrypt","WodaCrypt.html#method-c-new","()",""],["new","XFile","XFile.html#method-c-new","(*args, &block)",""],["path=","Storage","Storage.html#method-c-path-3D","(p)",""],["private_description","User","User.html#method-i-private_description","()","<p>User's private description\n"],["public","FilesController","FilesController.html#method-i-public","()","<p>Returns user's public files\n"],["put","SyncController","SyncController.html#method-i-put","()","<p>Create a file and return it.\n"],["read","Storage::FakeObject::SimulatedFile","Storage/FakeObject/SimulatedFile.html#method-i-read","(opt = {})",""],["recents","FilesController","FilesController.html#method-i-recents","()","<p>Gets the first 20 last updated files\n"],["remove_file_size","User","User.html#method-i-remove_file_size","(size)",""],["render","ApplicationController","ApplicationController.html#method-i-render","(*args, &block)",""],["require_admin_user","ApplicationController","ApplicationController.html#method-i-require_admin_user","()",""],["require_login","ApplicationController","ApplicationController.html#method-i-require_login","()",""],["rescue_db_error","ApplicationController","ApplicationController.html#method-i-rescue_db_error","(expt)",""],["rescue_request_error","ApplicationController","ApplicationController.html#method-i-rescue_request_error","(expt)",""],["retrieve","DownloadController","DownloadController.html#method-i-retrieve","(file, part)","<p>Retrieve data from bucket\n"],["search","SearchController","SearchController.html#method-i-search","()","<p>Create a friend for the current user\n"],["set_favorite","FilesController","FilesController.html#method-i-set_favorite","()","<p>Sets the file's favorite status based on parameter \"favorite\"\n"],["set_password","User","User.html#method-i-set_password","(pass)","<p>Always use this function to set password. Never set it by hand\n"],["set_properties","ApplicationController","ApplicationController.html#method-i-set_properties","(inst)","<p>Automatically sets the properties of an instance (inst) of the model\naccording to the params.\n"],["set_public","FilesController","FilesController.html#method-i-set_public","()","<p>Sets/Unsets a public status file\n"],["share","FilesController","FilesController.html#method-i-share","()","<p>Share a file to another user\n"],["share_to_user","WFile","WFile.html#method-c-share_to_user","(current_user, user, origin)","<p>Share a file to another user.\n"],["shared_by_me","FilesController","FilesController.html#method-i-shared_by_me","()","<p>Returns the list of all files shared BY the user if an id is specified the\nfile's description and all ...\n"],["shared_to_me","FilesController","FilesController.html#method-i-shared_to_me","()","<p>Returns the list of all files shared TO the user if an id is specified the\nfile's description and all ...\n"],["synchronize","SyncController","SyncController.html#method-i-synchronize","()","<p>Synchronize a public file into the main folder\n"],["to_hex","String","String.html#method-i-to_hex","()",""],["transaction","ApplicationController","ApplicationController.html#method-i-transaction","()",""],["uncrypt","DownloadController","DownloadController.html#method-i-uncrypt","(file, data, part)","<p>Uncrypt data for a file and a part\n"],["unshare","FilesController","FilesController.html#method-i-unshare","()","<p>Share a file to another user\n"],["unshare_to_user","WFile","WFile.html#method-c-unshare_to_user","(current_user, user, origin)","<p>Unshare a file to another user.\n"],["updatable?","WodaResource::ClassMethods","WodaResource/ClassMethods.html#method-i-updatable-3F","(property)","<p>Is the property updatable?\n"],["updatable_properties","WodaResource::ClassMethods","WodaResource/ClassMethods.html#method-i-updatable_properties","()","<p>The list of all updatable properties\n"],["updatable_property","WodaResource::ClassMethods","WodaResource/ClassMethods.html#method-i-updatable_property","(name, *args)","<p>Add a new updatable property\n"],["update_and_delete","WFile","WFile.html#method-i-update_and_delete","(user)","<p>Update the parent of the given file and remove its children and itself\n"],["update_and_delete","WFolder","WFolder.html#method-i-update_and_delete","(user)","<p>Update the parent of the given file and remove its children and itself\n"],["update_and_save","WFile","WFile.html#method-i-update_and_save","()","<p>Update the given file, save it and update its parent recursively\n"],["update_and_save","WFolder","WFolder.html#method-i-update_and_save","()","<p>Update the given file, save it and update its parent recursively\n"],["update_user_space","AdminController","AdminController.html#method-i-update_user_space","()","<p>Update the available space for a specific user\n"],["upload_part","SyncController","SyncController.html#method-i-upload_part","()","<p>Method to upload a part of 5mb for a specific file\n"],["uploaded","Content","Content.html#method-i-uploaded","()",""],["use_aws","Storage","Storage.html#method-c-use_aws","()",""],["use_aws=","Storage","Storage.html#method-c-use_aws-3D","(use)",""],["users","AdminController","AdminController.html#method-i-users","()","<p>Returns the list of all users\n"],["wrong_route","AdminController","AdminController.html#method-i-wrong_route","()",""]]}}